scalar PositiveInt
scalar Long
scalar BigDecimal

type Query {
    #rob_departments(filter: [DepartmentFilterGroup]) : [Department]
#    rob_employees(filter: [[RobEmployeeFilter]]) : [Employee]
#    rob_addresses(filter: [[RobAddressFilter]]): [Address]
#    rob_organizations(filter: [[RobOrganizationsFilter]]): [Organization]
    rob_clubs(filter: [ClubsFilterGroup]): [Clubs]
    rob_venues(filter: [VenuesFilterGroup]): [Venues]
    rob_orders(filter: [OrdersFilterGroup]): [Orders]
    me: User
}

type Mutation {
    createOrder(order: [OrderItemInput]): Orders
    updateOrder(orderId: Long, status: OrderStatus): Orders
    createMenuItem(menuItem: [MenuItemInput]): MenuItems
    updateSoldOut(menuItemId: Long, soldOut: Boolean): MenuItems
}

enum OrderStatus {
    READY
}

input OrderItemInput {
    comments: String,
    menuItemId: Long,
}

input MenuItemInput {
    menuId: Long,
    isActive: Boolean,
    soldOut: Boolean,
    name: String,
    description: String,
    price: BigDecimal
}

input DepartmentFilterGroup {
    filter: [RobDepartmentFilter]
    operator: String = "AND"
}

input DepartmentInput {
    name: String!
    organizationId: Int
}

type Department {
    id: ID
    name: String
    description: String
    employees(filter: [RobEmployeeFilter]): [Employee],
    organizations: [Organization]
}
type User {
    id: ID,
    name: String,
    roles: [Roles]
}
type Roles {
    id: ID,
    name: String
}

type Clubs {
    id: ID
    name: String
    description: String
    venues: [Venues]
}

input ClubsFilter {
    id: IntFilterField
    name: FilterField
}

input VenuesFilter {
    id: IntFilterField
    name: FilterField
}

input ClubsFilterGroup {
    filter: [ClubsFilter]
    operator: String = "AND"
}

input VenuesFilterGroup {
    filter: [VenuesFilter]
    operator: String = "AND"
}

input OrdersFilter {
    id: IntFilterField
    name: FilterField
}

input OrdersFilterGroup {
    filter: [OrdersFilter]
    operator: String = "AND"
}

type Venues {
    id: ID
    name: String
    description: String
    menus: [Menus]
}

type Menus {
    id: ID
    name: String
    description: String
    menuItems: [MenuItems]
}

type MenuItems {
    id: ID
    name: String
    description: String
    price: String
    isActive: Boolean
    soldOut: Boolean
}

type OrderItems {
    id: ID
    menuItemId: Long
    menuItem: MenuItems
}

type Orders {
    id: ID
    total: Float
    items: [OrderItems]
}

type Organization {
    id: ID
    name: String
    isActive: Boolean
    departments: [Department]
}

input RobDepartmentFilter {
    id: IntFilterField
    name: FilterField
    description: FilterField,
}

input RobOrganizationsFilter {
    id: IntFilterField
    name: FilterField
}

enum IntFilters {
    gt
    ge
    lt
    le
    eq
}

enum StringFilters {
    eq
    endsWith
    startsWith
    contains
}
input IntFilterField {
    operator: IntFilters,
    value: PositiveInt!,
    andOr: String = "AND"
}

input FilterField {
    operator: StringFilters,
    value: String!,
    andOr: String = "AND"
}

type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    position: String!
    salary: Int
    age: Int
    departments: [Department],
    addresses(filter: [RobAddressFilter]): [Address]
}

input RobEmployeeFilter {
    id: IntFilterField
    firstName: FilterField
}

input RobAddressFilter {
    id: IntFilterField
    street: FilterField
}

type Address {
    id: ID!
    isActive: Boolean
    street: String!
    employees: [Employee]
}
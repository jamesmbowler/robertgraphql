scalar PositiveInt

type Query {
    rob_departments(filter: [[RobDepartmentFilter]]) : [Department]
    rob_employees(filter: [RobEmployeeFilter]) : [Employee]
    rob_addresses(filter: [RobAddressFilter]): [Address],
    rob_organizations(filter: [RobOrganizationsFilter]): [Organization]
}

input DepartmentInput {
    name: String!
    organizationId: Int
}

type Department {
    id: ID
    name: String
    description: String
    employees(filter: [RobEmployeeFilter]): [Employee],
    organizations: [Organization]
}

type Organization {
    id: ID
    name: String
    isActive: Boolean
    departments: [Department]
}

input RobDepartmentFilter {
    id: IntFilterField
    name: FilterField
    description: FilterField
}

input RobOrganizationsFilter {
    id: IntFilterField
    name: FilterField
}

enum IntFilters {
    gt
    ge
    lt
    le
    eq
}

enum StringFilters {
    eq
    endsWith
    startsWith
    contains
}
input IntFilterField {
    operator: IntFilters,
    value: PositiveInt!,
    queryOperator: String = "AND"
}

input FilterField {
    operator: StringFilters,
    value: String!,
    queryOperator: String = "AND"
}

type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    position: String!
    salary: Int
    age: Int
    departments: [Department],
    addresses(filter: [RobAddressFilter]): [Address]
}

input RobEmployeeFilter {
    id: IntFilterField
    firstName: FilterField
}

input RobAddressFilter {
    id: IntFilterField
    street: FilterField
}

type Address {
    id: ID!
    isActive: Boolean
    street: String!
    employees: [Employee]
}